{"version":3,"file":"js/543.37262e8d.js","mappings":"2KAAO,IAAIA,EAAc,CAAEC,EAAgBC,KAEvC,IAAIC,EAAY,KAEhB,MAAO,CACHC,QACOF,GAAW,IACXC,GAAOE,cAAcF,GACxBA,EAAQG,YAAYL,EAAIC,GAC5B,EACAK,OACIF,cAAcF,EAClB,EACH,ECJL,OAA4BK,EAAAA,EAAAA,iBAAiB,CAC3CC,OAAQ,QACRC,MAAO,CACDR,SAAU,CAMNS,KAAM,CAACC,OAAQC,QACfC,QAAS,GAEbC,OAAQ,CACJJ,KAAMK,MACNF,QAAS,IAAM,GACfG,UAAU,GAEdC,WAAY,CACRP,KAAMC,OACNE,QAAS,IAGnBK,MAAMC,GAER,MAAMV,EAAQU,EAIV,IAAI,OAAEL,GAAWL,EAEbW,GAAUC,EAAAA,EAAAA,KAAI,GAEdC,GAASC,EAAAA,EAAAA,UAAU,CACnBC,IAAK,IAAMJ,EAAQK,MACnBC,IAAKD,IAID,IAAIE,EAAcb,EAAOc,OAAQ,EAC9BH,EAAQE,IAAaF,EAAQ,GAC5BA,EAAQ,IAAKA,EAAQE,GACzBP,EAAQK,MAAQA,EAKhBvB,EAAMC,OAAO,IAIjB0B,EAAO,IAAM,IAAId,MAAMN,EAAMQ,YAAYa,QAAQC,SAAQC,GAAKV,EAAOG,UACrEQ,EAAU,IAAM,IAAIlB,MAAMN,EAAMQ,YAAYa,QAAQC,SAAQC,GAAKV,EAAOG,UAExES,EAAQC,GAAkBb,EAAOG,MAAQU,EACzCC,EAAM,CACNF,OACAL,OACAI,UACAnB,SACIuB,YACA,OAAOvB,EAAOQ,EAAOG,MACzB,EACAa,UAAUH,EAAe1B,EAAMQ,WAAYsB,EAAiB,GACxD,OAAOC,EAAAA,EAAAA,IAAO1B,EAAQQ,EAAOG,MAAQc,GAAQE,MAAM,EAAGN,EAC1D,EACAK,OAAOP,GAAmB,GACtBA,EAAUG,EAAIH,UAAYG,EAAIP,MAClC,GAGA3B,EAAQH,EAAaqC,EAAIH,QAASxB,EAAMR,UAMhD,OAJIyC,EAAAA,EAAAA,aAAaxC,EAAMI,OACnBqC,EAAAA,EAAAA,WAAWzC,EAAMC,OAGd,CAACyC,EAAUC,MACRC,EAAAA,EAAAA,cAAcC,EAAAA,EAAAA,oBAAoB,MAAO,KAAM,EACrDC,EAAAA,EAAAA,YAAYJ,EAAKK,OAAQ,WAAWC,EAAAA,EAAAA,iBAAgBC,EAAAA,EAAAA,qBAAoBC,EAAAA,EAAAA,OAAOhB,QAGnF,ICvFA,MAAMiB,EAAc,EAEpB,O","sources":["webpack://test/./src/pockets/utils/create-timer/index.ts","webpack://test/./src/components/slider/index.vue?c65b","webpack://test/./src/components/slider/index.vue"],"sourcesContent":["export let createTimer = ( cb: () => void, interval: number ) => {\r\n    \r\n    let timer:any = null\r\n\r\n    return {\r\n        start() {\r\n            if(interval <=0) return;\r\n            if(timer) clearInterval(timer)\r\n            timer = setInterval(cb, interval)\r\n        },\r\n        stop(){\r\n            clearInterval(timer)\r\n        } \r\n    }\r\n} ","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nimport { rotate } from \"@/pockets/utils/dot-prop/array\"\r\n    import { createTimer } from \"@/pockets/utils/create-timer\"\r\n\r\n    import { ref, computed, onMounted, onUnmounted } from \"vue\"\r\n    \r\n    \nexport default /*#__PURE__*/_defineComponent({\n  __name: 'index',\n  props: {\r\n        interval: {\r\n            /**\r\n                How often slide shifts automatically.\r\n                If set to 0, slides will only shift when called by one of the provided methods.\r\n                Should be in MS eg 1000 = 1s\r\n            */\r\n            type: [Number, String],\r\n            default: 0\r\n        },\r\n        slides: {\r\n            type: Array,\r\n            default: () => [],\r\n            required: true\r\n        },\r\n        slideCount: {\r\n            type: Number,\r\n            default: 1\r\n        }\r\n    },\n  setup(__props) {\n\nconst props = __props;\n\r\n    \r\n\r\n    let { slides } = props\r\n\r\n    let $active = ref(0)\r\n    \r\n    let active = computed( {\r\n        get: () => $active.value,\r\n        set: value => {\r\n            /**\r\n                Boundary Check\r\n            */\r\n            let slide_count = slides.length -1\r\n            if(value > slide_count) value = 0\r\n            if( value < 0 )  value = slide_count\r\n            $active.value = value\r\n            /**\r\n                Re-firing timer every time slide changes to make sure \r\n                the slide won't just immediately change after a user interaction.\r\n            */\r\n            timer.start()\r\n        }\r\n    } )\r\n\r\n    let back = () => [...Array(props.slideCount).keys()].forEach(e => active.value--) \r\n    let forward = () => [...Array(props.slideCount).keys()].forEach(e => active.value++) \r\n\r\n    let jump = (count: number) => active.value = count\r\n    let api = {\r\n        jump, \r\n        back, \r\n        forward,\r\n        slides,\r\n        get slide(){\r\n            return slides[active.value]\r\n        },\r\n        getSlides(count:number = props.slideCount, offset: number = 0){\r\n            return rotate(slides, active.value + offset).slice(0, count)\r\n        },\r\n        rotate(forward: boolean = true) {\r\n            forward ? api.forward() : api.back()\r\n        }\r\n    } \r\n    \r\n    let timer = createTimer( api.forward, props.interval as number )\r\n\r\n    onUnmounted( timer.stop )\r\n    onMounted( timer.start )\r\n\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    _renderSlot(_ctx.$slots, \"default\", _normalizeProps(_guardReactiveProps(_unref(api))))\n  ]))\n}\n}\n\n})","import script from \"./index.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["createTimer","cb","interval","timer","start","clearInterval","setInterval","stop","_defineComponent","__name","props","type","Number","String","default","slides","Array","required","slideCount","setup","__props","$active","ref","active","computed","get","value","set","slide_count","length","back","keys","forEach","e","forward","jump","count","api","slide","getSlides","offset","rotate","slice","onUnmounted","onMounted","_ctx","_cache","_openBlock","_createElementBlock","_renderSlot","$slots","_normalizeProps","_guardReactiveProps","_unref","__exports__"],"sourceRoot":""}