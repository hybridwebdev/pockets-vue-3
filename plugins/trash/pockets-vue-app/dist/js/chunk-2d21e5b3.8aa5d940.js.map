{"version":3,"sources":["webpack:///./src/pockets/components/pockets-app/index.vue?4ed1","webpack:///./src/pockets/components/pockets-app/index.vue"],"names":["_defineComponent","__name","setup","__props","slots","useSlots","style","class","className","cleanedAttrs","useAttrs","data","reactive","render","h","default","_ctx","_cache","_openBlock","_createBlock","_unref","__exports__"],"mappings":"uIAK4BA,+BAAiB,CAC3CC,OAAQ,QACRC,MAAMC,GAER,IAAIC,EAAQC,yBACR,MAKAC,EACAC,MAAOC,KACJC,GACHC,wBAQAC,EAAOC,sBAASH,GAIhBI,EAAS,IAAMC,eAAG,MAAOV,EAAMW,QAASJ,IAE5C,MAAO,CAACK,EAAUC,KACRC,yBAAcC,yBAAaC,mBAAOP,QC9B5C,MAAMQ,EAAc,EAEL","file":"js/chunk-2d21e5b3.8aa5d940.js","sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport { reactive, useAttrs, useSlots, h } from 'vue'\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'index',\n  setup(__props) {\n\r\nlet slots = useSlots()\r\nlet {\r\n    /**\r\n        Using destructuring to omit any declared values, \r\n        and assign the rest to cleanedAttrs.\r\n    */\r\n    style,\r\n    class: className,\r\n    ...cleanedAttrs\r\n} = useAttrs()\r\n/**\r\n    All declared attributes(less omissions) are used to create a reactive which is passed to a scoped slot. \r\n    So for example a user could create an element: \r\n    <pocket-app foo='test' #default='data'>\r\n        {{data.foo}} <- output is test\r\n    </pocket-app>\r\n*/\r\nlet data = reactive(cleanedAttrs)\r\n/**\r\n    class is a fallthrough attribute that gets auto-applied to the element. \r\n*/\r\nlet render = () => h( 'div', slots.default( data ) )\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(_unref(render)))\n}\n}\n\n})","import script from \"./index.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./index.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}